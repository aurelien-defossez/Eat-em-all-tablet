-----------------------------------------------------------------------------------------
--
-- SpriteManager.lua
--
-- Load the sprites using the spritesheet image, the spritesheet data (generated by an
-- external tool) and the sprites data (internal data).
--
-----------------------------------------------------------------------------------------

module("SpriteManager", package.seeall)
SpriteManager.__index = SpriteManager

-----------------------------------------------------------------------------------------
-- Imports
-----------------------------------------------------------------------------------------

local animationData = require("src.sprites.AnimationData")
local SpriteLib = require("sprite")
local SpritesheetData = require("src.sprites.SpritesheetData")

-----------------------------------------------------------------------------------------
-- Class attributes
-----------------------------------------------------------------------------------------

-- The different sets of sprites (e.g. the zombie set contains all animations concerning the zombie)
sets = nil

-- The timescale (1 mean normal speed, 0.5 half-speed and 2 double speed)
timeScale = 1

-----------------------------------------------------------------------------------------
-- Initialization and Destruction
-----------------------------------------------------------------------------------------

-- Pre load sprites
function initialize()
	-- Load sprite sheet
	local spritesheetData = SpritesheetData.getSpriteSheetData()
	local spriteSheet = SpriteLib.newSpriteSheetFromData("images/bin/spritesheet.png", spritesheetData)
	local spriteSheetIndex = {}

	-- Initalize the index array to simply get an array index from its name
	for key, value in pairs(spritesheetData.frames) do
		spriteSheetIndex[value.name] = key
	end

	-- Load sprite sets
	sets = {
		arrow = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.arrow),
		cemetery = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.cemetery),
		city = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.city),
		fortressWall = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.fortressWall),
		mana = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.mana),
		zombie = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.zombie),
		misc = loadSpriteSet(spriteSheet, spriteSheetIndex, animationData.misc)
	}
end

-----------------------------------------------------------------------------------------
-- Methods
-----------------------------------------------------------------------------------------

-- Return the sprite set for the given sprites
--
-- Parameters:
--  sprites: A list of sprite names, with the number of frames for each one
--
-- Returns:
--  The sprite set containing all these animations
function loadSpriteSet(spriteSheet, spriteSheetIndex, sprites)
	local spriteSet = SpriteLib.newSpriteSet(spriteSheet, 1, 1)

	for spriteName, animation in pairs(sprites) do
		local firstSpriteName
		local frameCount = animation.frameCount or 1
		-- Set the period to 10 minutes if no period is defined (= steady frame)
		local period = animation.period or 600000
		-- Set the loop parameter to 0 (loop indefinitely) by default or 1 (one loop) if loop is false
		local loop = (animation.loop == false) and 1 or 0

		-- Rename sprite as the first sprite of the animation if it is one
		if frameCount == 1 then
			firstSpriteName = spriteName
		else
			firstSpriteName = spriteName .. "_01"
		end
		
		-- Add the animation to the sprite set
		SpriteLib.add(spriteSet, spriteName, spriteSheetIndex[firstSpriteName .. ".png"], frameCount, period, loop)
	end
	
	return spriteSet
end

-- Instanciate a sprite for a certain sprite set
--
-- Parameters:
--  spriteSet: The sprite set
--
-- Returns:
--  A new instance of the sprite set
function newSprite(spriteSet)
	local sprite = SpriteLib.newSprite(spriteSet)
	sprite.timeScale = timeScale

	return sprite
end

-- Sets the animation time scale.
-- A time scale of 1.0 runs the animation at normal speed.
-- A time scale of 2.0 runs the animation twice as fast.
-- A time scale of 0.5 runs the animation at half speed.
--
-- Parameters:
--  newTimeScale: The time scale
function setTimeScale(newTimeScale)
	timeScale = newTimeScale

	Runtime:dispatchEvent{
		name = "spriteChangeSpeed",
		timeScale = newTimeScale
	}
end

-----------------------------------------------------------------------------------------

return SpriteManager
